'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

let Cache = class Cache {
    constructor(cacheName) {
        this.cacheDir = _path2.default.join(__dirname, '..', 'cache');
        if (!fs.existsSync(this.cacheDir)) {
            fs.mkdirSync(this.cacheDir);
        }
        this.cacheFile = _path2.default.join(this.cacheDir, `${cacheName}.json`);
        try {
            let data = fs.readFileSync(this.cacheFile, 'utf8');
            this._data = JSON.parse(data);
        } catch (error) {
            fs.writeFileSync(this.cacheFile, '{}');
            this._data = {};
        }
    }
    get(key) {
        return this._data[key];
    }
    set(key, value) {
        this._data[key] = value;
        this._save();
    }
    clear() {
        this._data = {};
        this._save();
    }
    _save() {
        fs.writeFile(this.cacheFile, JSON.stringify(this._data), 'utf8', () => {});
    }
};
exports.default = Cache;
module.exports = exports['default'];